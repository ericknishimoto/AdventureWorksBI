/*
Deployment script for DW_AdventureWorks

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DW_AdventureWorks"
:setvar DefaultFilePrefix "DW_AdventureWorks"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[DimCustomer]...';


GO
CREATE TABLE [dbo].[DimCustomer] (
    [CustomerKey]                INT            IDENTITY (1, 1) NOT NULL,
    [CustomerAlternateKey]       INT            NOT NULL,
    [CustomerFullName]           NVARCHAR (MAX) NOT NULL,
    [CustomerMaritalStatus]      NVARCHAR (2)   NULL,
    [CustomerGender]             NVARCHAR (2)   NULL,
    [CustomerTotalChildren]      INT            NULL,
    [CustomerEducation]          NVARCHAR (50)  NULL,
    [CustomerTerritoryName]      NVARCHAR (50)  NULL,
    [TerritoryCountryRegionCode] NVARCHAR (50)  NULL,
    [TerritoryGroup]             NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CustomerKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimDate]...';


GO
CREATE TABLE [dbo].[DimDate] (
    [DateKey]              INT           NOT NULL,
    [FullDateAlternateKey] DATE          NOT NULL,
    [Year]                 INT           NOT NULL,
    [SemesterNumber]       INT           NOT NULL,
    [Semester]             NVARCHAR (50) NOT NULL,
    [TrimesterNumber]      INT           NOT NULL,
    [Trimester]            NVARCHAR (50) NOT NULL,
    [MonthNumber]          INT           NOT NULL,
    [Month]                NVARCHAR (50) NOT NULL,
    [Day]                  INT           NOT NULL,
    [WeekDayNumber]        INT           NOT NULL,
    [WeekDay]              NVARCHAR (50) NOT NULL,
    [WeekYearNum]          INT           NOT NULL,
    [WeekYear]             NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([DateKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimProduct]...';


GO
CREATE TABLE [dbo].[DimProduct] (
    [ProductKey]          INT           IDENTITY (1, 1) NOT NULL,
    [ProducAlternatetKey] INT           NOT NULL,
    [ProductName]         NVARCHAR (50) NOT NULL,
    [ProductColor]        NVARCHAR (50) NULL,
    [ProductSubcategory]  NVARCHAR (50) NOT NULL,
    [ProductCategory]     NVARCHAR (50) NOT NULL,
    [ListPrice]           MONEY         NOT NULL,
    [StandardCost]        MONEY         NOT NULL,
    PRIMARY KEY CLUSTERED ([ProductKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimSalesTerritory]...';


GO
CREATE TABLE [dbo].[DimSalesTerritory] (
    [TerritoryKey]               INT           IDENTITY (1, 1) NOT NULL,
    [TerritoryAlternateKey]      INT           NOT NULL,
    [TerritoryName]              NVARCHAR (50) NULL,
    [TerritoryCountryRegionCode] NVARCHAR (50) NULL,
    [TerritoryGroup]             NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([TerritoryKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimSpecialOffer]...';


GO
CREATE TABLE [dbo].[DimSpecialOffer] (
    [SpecialOfferKey]          INT           IDENTITY (1, 1) NOT NULL,
    [SpecialOfferAlternateKey] INT           NULL,
    [SpecialOfferDescription]  NVARCHAR (50) NULL,
    [DiscountPct]              NUMERIC (18)  NULL,
    [SpecialOfferType]         NVARCHAR (50) NULL,
    [SpecialOfferCategory]     NVARCHAR (50) NULL,
    [SpecialOfferStarDate]     DATE          NULL,
    [SpecialOfferEndDate]      DATE          NULL,
    [SpecialOfferMinQty]       MONEY         NULL,
    [SpecialOfferMaxQty]       MONEY         NULL,
    PRIMARY KEY CLUSTERED ([SpecialOfferKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[FactInternetSales]...';


GO
CREATE TABLE [dbo].[FactInternetSales] (
    [SalesOrderKey]          INT        IDENTITY (1, 1) NOT NULL,
    [CustomerKey]            INT        NOT NULL,
    [ProductKey]             INT        NOT NULL,
    [TerritoryKey]           INT        NOT NULL,
    [SpecialOfferKey]        INT        NOT NULL,
    [OrderDate]              INT        NOT NULL,
    [DueDate]                INT        NOT NULL,
    [ShipDate]               INT        NOT NULL,
    [Subtotal]               MONEY      NOT NULL,
    [OrderQty]               FLOAT (53) NOT NULL,
    [UnitPrice]              MONEY      NOT NULL,
    [UnitPriceDiscount]      FLOAT (53) NOT NULL,
    [LineTotal]              MONEY      NOT NULL,
    [SalesOrderAlternateKey] INT        NOT NULL,
    PRIMARY KEY CLUSTERED ([SalesOrderKey] ASC)
);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a41e7d52-e85a-46ef-858b-02f9821cf4ca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a41e7d52-e85a-46ef-858b-02f9821cf4ca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '531b98c6-a005-40d3-b262-3c5d70d275a1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('531b98c6-a005-40d3-b262-3c5d70d275a1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '663b848a-104d-45f3-9ea7-619f71a4e18a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('663b848a-104d-45f3-9ea7-619f71a4e18a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a2b624e6-8ce1-4407-9a18-e7a1b51b62c8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a2b624e6-8ce1-4407-9a18-e7a1b51b62c8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '56cc48ed-ce13-42f7-a3c0-c453b9d801eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('56cc48ed-ce13-42f7-a3c0-c453b9d801eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '84b16a72-bcf2-413a-856d-2e5aee99a594')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('84b16a72-bcf2-413a-856d-2e5aee99a594')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1eb4edfc-741e-4c06-bfa1-0d05865b515f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1eb4edfc-741e-4c06-bfa1-0d05865b515f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8bdc1c30-5293-41e7-a649-a423520f3456')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8bdc1c30-5293-41e7-a649-a423520f3456')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a54db4ba-c337-49e5-877a-25f843beec12')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a54db4ba-c337-49e5-877a-25f843beec12')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '15d6145d-8b3d-438c-8bd3-c1ad5507d9fe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('15d6145d-8b3d-438c-8bd3-c1ad5507d9fe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '65aadda1-4398-4ee1-b5c1-646a7935a129')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('65aadda1-4398-4ee1-b5c1-646a7935a129')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ecd45feb-c8bf-44b1-8913-3651f42df4e7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ecd45feb-c8bf-44b1-8913-3651f42df4e7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f2f3d990-f3c1-421b-8797-d7525b3a7806')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f2f3d990-f3c1-421b-8797-d7525b3a7806')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e29e81e8-4c30-4627-b75a-a18ec77733b7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e29e81e8-4c30-4627-b75a-a18ec77733b7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6b9946d9-67ba-4aca-aa69-38c8238d6abc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6b9946d9-67ba-4aca-aa69-38c8238d6abc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a3213e67-c6e7-4942-86fe-e51e6a2ddbf0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a3213e67-c6e7-4942-86fe-e51e6a2ddbf0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '17667258-5a8e-4497-9452-dffb70cbe3b8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('17667258-5a8e-4497-9452-dffb70cbe3b8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '569d6cb7-1b8f-4dae-8001-edd312a54c67')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('569d6cb7-1b8f-4dae-8001-edd312a54c67')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c7158d4a-851d-40d7-868a-59c16ba73bc1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c7158d4a-851d-40d7-868a-59c16ba73bc1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7b0269d8-425d-4292-9c59-ef675f69b68e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7b0269d8-425d-4292-9c59-ef675f69b68e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b0b22fde-3aa6-4658-b3f7-93a0eb1bb93e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b0b22fde-3aa6-4658-b3f7-93a0eb1bb93e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '492c7f4b-2693-4969-bf2d-be849947e466')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('492c7f4b-2693-4969-bf2d-be849947e466')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e0ce3fd7-8d04-4e5c-b4c4-d2029986be8d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e0ce3fd7-8d04-4e5c-b4c4-d2029986be8d')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
